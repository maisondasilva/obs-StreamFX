; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "@PROJECT_TITLE@"
#define MyAppVersion "@PROJECT_VERSION@"
#define MyAppVersionText "@_VERSION@"
#define MyAppPublisher "Xaymars Technology Workshop"
#define MyAppURL "https://xaymar.com/"
#define MyAppCopyright "@PROJECT_COPYRIGHT@"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)

; Application Information
AppId={{DE56A03A-C8A4-474B-83B0-CFD270262D38}}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
AppMutex={#MyAppName}

; Versioning
VersionInfoProductName={#MyAppName}
VersionInfoProductVersion={#MyAppVersion}
VersionInfoVersion={#MyAppVersion}
VersionInfoProductTextVersion={#MyAppVersionText}
VersionInfoTextVersion={#MyAppVersionText}
VersionInfoCompany={#MyAppPublisher}
VersionInfoCopyright={#MyAppCopyright}
VersionInfoDescription={#MyAppName} Setup

; Architecture (Platform is always Windows)
ArchitecturesInstallIn64BitMode=x64 arm64 ia64
ArchitecturesAllowed=@ARCH@

; Installation Modes
UsePreviousPrivileges=no
PrivilegesRequired=admin
PrivilegesRequiredOverridesAllowed=dialog commandline

; Wizard Information
WizardStyle=modern
WizardResizable=yes
SetupIconFile="@PROJECT_SOURCE_DIR@/media/icon.ico"
UninstallDisplayIcon={uninstallexe}

; Directory Choice
UsePreviousAppDir=no
DisableDirPage=no
DirExistsWarning=no
DefaultDirName={code:GetDefaultDirectory}
AppendDefaultDirName=no
DefaultGroupName={#MyAppName}
AppendDefaultGroupName=yes

; Other Information
Uninstallable=not IsPortablePagePortableChoiceChecked()
AllowNoIcons=yes
LicenseFile="@ISS_SOURCE_DIR@/LICENSE"
OutputDir="@ISS_PACKAGE_DIR@"
OutputBaseFilename=@PACKAGE_NAME@-@_PACKAGE_SUFFIX_OVERRIDE@
Compression=lzma2/ultra64
SolidCompression=yes
LZMAAlgorithm=1

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Files]
Source: "@ISS_FILES_DIR@/*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "@PROJECT_SOURCE_DIR@/templates/windows/msvc-redist-helper.exe"; DestDir: "{app}"; DestName: "msvc-redist-helper.exe"; Flags: ignoreversion dontcopy noencryption
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{group}\{cm:ProgramOnTheWeb,{#MyAppName}}"; Filename: "{#MyAppURL}"
Name: "{group}\{cm:UninstallProgram,{#MyAppName}}"; Filename: "{uninstallexe}"

[Code]
// ------------------------------------------------------------------------------------------------------------------ //
var
	oModePageStaticChoice: TNewRadioButton;
	oModePagePortableChoice: TNewRadioButton;

function FindRegistryKey(): String; forward;
function GetDefaultDirectory(Value: String): String; forward;
function GetUninstallerPath(): String; forward;
function IsUpgrade(): Boolean; forward;
function IsPortablePagePortableChoiceChecked(): Boolean; forward;
function UninstallOldVersion(): Integer; forward;
procedure OnPortablePagePortableChoiceClick(Sender: TObject); forward;
procedure OnPortablePageStaticChoiceClick(Sender: TObject); forward;
function CreateModePage: TWizardPage; forward;
procedure InitializeWizard; forward;
function ShouldSkipPage(PageID: Integer): Boolean; forward;
function PrepareToInstall(var NeedsRestart: Boolean): String; forward;

// ------------------------------------------------------------------------------------------------------------------ //
function FindRegistryKey(): String;
begin
	Result := ExpandConstant('Software\Microsoft\Windows\CurrentVersion\Uninstall\{#emit SetupSetting('AppId')}_is1');
end;

// ------------------------------------------------------------------------------------------------------------------ //
function GetDefaultDirectory(Value: String): String;
var
	sInstallPath: String;
begin
	// If a path was given as an argument, use it.
	if (Value != '') then
	begin
		Exit(Value);
	end

	// Try and figure out where the previous installation went to.
	RegQueryStringValue(HKA64, FindRegistryKey(), 'InstallLocation', sInstallPath);
	if (sInstallPath != '') then
	begin
		Exit(sInstallPath);
	end

	// Finally, default to ProgramData/obs-studio/{#MyAppName}
	Exit(ExpandConstant('{commonappdata}\obs-studio\plugins\{#MyAppName}'));
end;

// ------------------------------------------------------------------------------------------------------------------ //
function GetUninstallerPath(): String;
var
	sRegistryKey: String;
	sUninstallerPath: String;
begin
	sRegistryKey := FindRegistryKey();

	RegQueryStringValue(HKLM64, sRegistryKey, 'UninstallString', sUninstallerPath);

	if (sUninstallerPath = '') then
		RegQueryStringValue(HKCU64, sRegistryKey, 'UninstallString', sUninstallerPath);

	if (sUninstallerPath = '') then
		RegQueryStringValue(HKLM32, sRegistryKey, 'UninstallString', sUninstallerPath);

	if (sUninstallerPath = '') then
		RegQueryStringValue(HKCU32, sRegistryKey, 'UninstallString', sUninstallerPath);

	Result := sUninstallerPath;
end;

// ------------------------------------------------------------------------------------------------------------------ //
function IsUpgrade(): Boolean;
begin
	Result := (not IsPortablePagePortableChoiceChecked()) and (GetUninstallerPath() <> '');
end;

// ------------------------------------------------------------------------------------------------------------------ //
function UninstallOldVersion(): Integer;
var
	sUninstallerPath: String;
	iResultCode: Integer;
begin
	Result := 0;
	sUninstallerPath := GetUninstallerPath();
	if (sUninstallerPath <> '') then begin
		sUninstallerPath := RemoveQuotes(sUninstallerPath);
		if Exec(sUninstallerPath, '/VERYSILENT /NORESTART /SUPPRESSMSGBOXES', '', SW_HIDE, ewWaitUntilTerminated, iResultCode) then begin
			Result := iResultCode
		end else begin
			Result := 1
		end;
	end;
end;

// ------------------------------------------------------------------------------------------------------------------ //
procedure OnPortablePagePortableChoiceClick(Sender: TObject);
begin
	oModePageStaticChoice.Checked := False;
	oModePagePortableChoice.Checked := True;
end;

procedure OnPortablePageStaticChoiceClick(Sender: TObject);
begin
	if (not oModePageStaticChoice.Enabled) then begin
		OnPortablePagePortableChoiceClick(Sender);
	end else begin
		oModePageStaticChoice.Checked := True;
		oModePagePortableChoice.Checked := False;
	end;
end;

function IsPortablePagePortableChoiceChecked(): Boolean;
begin
	Result := oModePagePortableChoice.Checked;
end;

function CreateModePage: TWizardPage;
var
	oPage: TWizardPage;
	oSystemWidePanel: TPanel;
	oSystemWideChoice: TNewRadioButton;
	oSystemWideText: TLabel;
	oSystemWideWarningText: TLabel;
	oLocalUserPanel: TPanel;
	oLocalUserChoice: TNewRadioButton;
	oLocalUserText: TLabel;
	oLocalUserWarningText: TLabel;
	oPortablePanel: TPanel;
	oPortableChoice: TNewRadioButton;
	oPortableText: TLabel;
	oPortableWarningText: TLabel;
begin
	// Build a page that asks a user if they want to use Movable or Static installation.
	oPage := CreateCustomPage(wpLicense,
		'Installation Type',
		'Select how to install StreamFX on your System');

	// System-Wide installation
	oSystemWidePanel := TPanel.Create(oPage);
	oSystemWidePanel.Parent := oPage.Surface;
	oSystemWidePanel.ParentBackground := False;
	oSystemWidePanel.Left := ScaleX(5);
	oSystemWidePanel.Top := ScaleY(5);
	oSystemWidePanel.Width := oPage.SurfaceWidth - ScaleX(10);
	oSystemWidePanel.Height := ScaleY(100);
	oSystemWidePanel.Anchors := [akLeft, akTop, akRight];
	oSystemWidePanel.Color := clWindow;
	oSystemWidePanel.BevelKind := bkTile;
	oSystemWidePanel.BevelInner := bvNone;
	oSystemWidePanel.BevelOuter := bvRaised;
	oSystemWidePanel.BevelWidth := 1;
	oSystemWidePanel.OnClick := @OnPortablePageStaticChoiceClick;

	oSystemWideChoice := TNewRadioButton.Create(oSystemWidePanel);
	oModePageStaticChoice := oSystemWideChoice;
	oSystemWideChoice.Parent := oSystemWidePanel;
	oSystemWideChoice.ParentBackground := False;
	oSystemWideChoice.Left := ScaleX(5);
	oSystemWideChoice.Top := ScaleY(5);
	oSystemWideChoice.Width := oSystemWidePanel.Width - ScaleX(10);
	oSystemWideChoice.Height := ScaleY(20);
	oSystemWideChoice.Anchors := [akLeft, akTop, akRight];
	oSystemWideChoice.Caption := 'Static';
	oSystemWideChoice.Font.Style := [fsBold];
	oSystemWideChoice.OnClick := @OnPortablePageStaticChoiceClick;

	oSystemWideText := TLabel.Create(oSystemWidePanel);
	oSystemWideText.Parent := oSystemWidePanel;
	oSystemWideText.AutoSize := False;
	oSystemWideText.Left := ScaleX(5);
	oSystemWideText.Top := ScaleY(5) + oSystemWideChoice.Top + oSystemWideChoice.Height;
	oSystemWideText.Width := oSystemWidePanel.Width - ScaleX(10);
	oSystemWideText.Height := oSystemWidePanel.Height - ScaleX(5) - oSystemWideText.Top;
	oSystemWideText.Anchors := [akLeft, akTop, akRight];
	oSystemWideText.WordWrap := True
	oSystemWideText.Caption := 'Install for use in a static version of OBS Studio, with all necessary features to support it.';
	oSystemWideText.OnClick := @OnPortablePageStaticChoiceClick;

	// Local-User installation
	oLocalUserPanel := TPanel.Create(oPage);
	oSystemWidePanel.Parent := oPage.Surface;
	oSystemWidePanel.ParentBackground := False;
	oSystemWidePanel.Left := ScaleX(5);
	oSystemWidePanel.Top := ScaleY(5);
	oSystemWidePanel.Width := oPage.SurfaceWidth - ScaleX(10);
	oSystemWidePanel.Height := ScaleY(100);
	oSystemWidePanel.Anchors := [akLeft, akTop, akRight];
	oSystemWidePanel.Color := clWindow;
	oSystemWidePanel.BevelKind := bkTile;
	oSystemWidePanel.BevelInner := bvNone;
	oSystemWidePanel.BevelOuter := bvRaised;
	oSystemWidePanel.BevelWidth := 1;
	oSystemWidePanel.OnClick := @OnPortablePageStaticChoiceClick;

	oSystemWideChoice := TNewRadioButton.Create(oSystemWidePanel);
	oModePageStaticChoice := oSystemWideChoice;
	oSystemWideChoice.Parent := oSystemWidePanel;
	oSystemWideChoice.ParentBackground := False;
	oSystemWideChoice.Left := ScaleX(5);
	oSystemWideChoice.Top := ScaleY(5);
	oSystemWideChoice.Width := oSystemWidePanel.Width - ScaleX(10);
	oSystemWideChoice.Height := ScaleY(20);
	oSystemWideChoice.Anchors := [akLeft, akTop, akRight];
	oSystemWideChoice.Caption := 'Static';
	oSystemWideChoice.Font.Style := [fsBold];
	oSystemWideChoice.OnClick := @OnPortablePageStaticChoiceClick;

	oSystemWideText := TLabel.Create(oSystemWidePanel);
	oSystemWideText.Parent := oSystemWidePanel;
	oSystemWideText.AutoSize := False;
	oSystemWideText.Left := ScaleX(5);
	oSystemWideText.Top := ScaleY(5) + oSystemWideChoice.Top + oSystemWideChoice.Height;
	oSystemWideText.Width := oSystemWidePanel.Width - ScaleX(10);
	oSystemWideText.Height := oSystemWidePanel.Height - ScaleX(5) - oSystemWideText.Top;
	oSystemWideText.Anchors := [akLeft, akTop, akRight];
	oSystemWideText.WordWrap := True
	oSystemWideText.Caption := 'Install for use in a static version of OBS Studio, with all necessary features to support it.';
	oSystemWideText.OnClick := @OnPortablePageStaticChoiceClick;

	// Portable
	oPortablePanel := TPanel.Create(oPage);
	oPortablePanel.Parent := oPage.Surface;
	oPortablePanel.ParentBackground := False;
	oPortablePanel.Left := ScaleX(5);
	oPortablePanel.Top := ScaleY(5) + oSystemWidePanel.Top + oSystemWidePanel.Height;
	oPortablePanel.Width := oPage.SurfaceWidth - ScaleX(10);
	oPortablePanel.Height := ScaleY(100);
	oPortablePanel.Anchors := [akLeft, akTop, akRight];
	oPortablePanel.Color := clWindow;
	oPortablePanel.BevelKind := bkTile;
	oPortablePanel.BevelInner := bvNone;
	oPortablePanel.BevelOuter := bvRaised;
	oPortablePanel.BevelWidth := 1;
	oPortablePanel.OnClick := @OnPortablePagePortableChoiceClick;

	oPortableChoice := TNewRadioButton.Create(oPortablePanel);
	oModePagePortableChoice := oPortableChoice;
	oPortableChoice.Parent := oPortablePanel;
	oPortableChoice.ParentBackground := False;
	oPortableChoice.Left := ScaleX(5);
	oPortableChoice.Top := ScaleY(5);
	oPortableChoice.Width := oPortablePanel.Width - ScaleX(10);
	oPortableChoice.Height := ScaleY(20);
	oPortableChoice.Anchors := [akLeft, akTop, akRight];
	oPortableChoice.Caption := 'Portable';
	oPortableChoice.Font.Style := [fsBold];
	oPortableChoice.OnClick := @OnPortablePagePortableChoiceClick;

	oPortableText := TLabel.Create(oPortablePanel);
	oPortableText.Parent := oPortablePanel;
	oPortableText.AutoSize := False;
	oPortableText.Left := ScaleX(5);
	oPortableText.Top := ScaleY(5) + oPortableChoice.Top + oPortableChoice.Height;
	oPortableText.Width := oPortablePanel.Width - ScaleX(10);
	oPortableText.Height := oPortablePanel.Height - ScaleX(5) - oPortableText.Top;
	oPortableText.Anchors := [akLeft, akTop, akRight];
	oPortableText.WordWrap := True
	oPortableText.Caption := 'Install for use in portable or multi-environment scenarios, which require StreamFX to not be tied to the System itself. The uninstaller, automatic updates and other system-dependent features will be unavailable.';
	oPortableText.OnClick := @OnPortablePagePortableChoiceClick;

	if (not IsAdmin()) then begin
		oSystemWideWarningText := TLabel.Create(oSystemWidePanel);
		oSystemWideWarningText.Parent := oSystemWidePanel;
		oSystemWideWarningText.AutoSize := False;
		oSystemWideWarningText.Left := ScaleX(5);
		oSystemWideWarningText.Top := oSystemWidePanel.Height - ScaleY(5) - ScaleY(15);
		oSystemWideWarningText.Width := oSystemWidePanel.Width - ScaleX(10);
		oSystemWideWarningText.Height := ScaleY(15);
		oSystemWideWarningText.Anchors := [akLeft, akBottom, akRight];
		oSystemWideWarningText.WordWrap := True
		oSystemWideWarningText.Font.Color := clRed;
		oSystemWideWarningText.Font.Style := [fsBold];
		oSystemWideWarningText.Caption := 'System-WidePlease launch the Installer as Administrator for system-wide installations.';

		oSystemWidePanel.Enabled := False;
		oSystemWideChoice.Enabled := False;
		oSystemWideText.Enabled := False;

		oSystemWideChoice.Checked := False;
		oPortableChoice.Checked := True;
	end else begin
		oLocalUserWarningText := TLabel.Create(oLocalUserPanel);
		oLocalUserWarningText.Parent := oLocalUserPanel;
		oLocalUserWarningText.AutoSize := False;
		oLocalUserWarningText.Left := ScaleX(5);
		oLocalUserWarningText.Top := oLocalUserPanel.Height - ScaleY(5) - ScaleY(15);
		oLocalUserWarningText.Width := oLocalUserPanel.Width - ScaleX(10);
		oLocalUserWarningText.Height := ScaleY(15);
		oLocalUserWarningText.Anchors := [akLeft, akBottom, akRight];
		oLocalUserWarningText.WordWrap := True
		oLocalUserWarningText.Font.Color := clRed;
		oLocalUserWarningText.Font.Style := [fsBold];
		oLocalUserWarningText.Caption := 'Local-User mode requires non-Administrator installation.';


		oSystemWideChoice.Checked := True;
		oPortableChoice.Checked := False;
	end;

	Result := oPage;
end;

procedure InitializeWizard;
var
	oModePage: TWizardPage;
begin
	oModePage := CreateModePage();
end;

// ------------------------------------------------------------------------------------------------------------------ //
function ShouldSkipPage(PageID: Integer): Boolean;
begin
	Result := False;
end;

// ------------------------------------------------------------------------------------------------------------------ //
function PrepareToInstall(var NeedsRestart: Boolean): String;
var
	iResultCode: Integer;
begin
	// Attempt to remove old version if it exists.
	if (IsUpgrade()) then begin
		UninstallOldVersion();
	end;

	// Also ensure that we have the necessary prerequisites installed to run the program.
		ExtractTemporaryFile('msvc-redist-helper.exe');
		Exec(ExpandConstant('{tmp}\msvc-redist-helper.exe'), '2019', '', SW_HIDE, ewWaitUntilTerminated, iResultCode);
end;
